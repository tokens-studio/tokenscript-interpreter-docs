// Auto-generated file - DO NOT EDIT
// Generated at: 2025-10-23T19:05:15.927Z
// This file contains TokenScript schemas fetched at build time

export const COLOR_SCHEMAS = new Map<string, any>([
  ['https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/hsl-color/0/', {"name":"HSL","type":"color","schema":{"type":"object","order":["h","s","l"],"required":["h","s","l"],"properties":{"h":{"type":"number"},"l":{"type":"number"},"s":{"type":"number"}},"additionalProperties":false},"conversions":[{"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable rgb: List = {input}.r, {input}.g, {input}.b;\nvariable hsl: List = 0, 0, 0;\n\n// Step 1: Normalize RGB values to [0,1] range\n// Assume input is either already normalized (0-1) or in [0-255] range\nvariable r: Number = rgb.get(0);\nvariable g: Number = rgb.get(1); \nvariable b: Number = rgb.get(2);\n\n// If any component > 1, assume 0-255 range and normalize\nif (r > 1 || g > 1 || b > 1) [\n    r = r / 255;\n    g = g / 255;\n    b = b / 255;\n];\n\n// Step 2: Find min and max values\nvariable max_val: Number = max(max(r, g), b);\nvariable min_val: Number = min(min(r, g), b);\nvariable delta: Number = max_val - min_val;\n\n// Step 3: Calculate Lightness (0-1, will convert to 0-100 later)\nvariable lightness: Number = (max_val + min_val) / 2;\n\n// Step 4: Calculate Saturation\nvariable saturation: Number = 0;\nif (delta > 0) [\n    if (lightness <= 0.5) [\n        saturation = delta / (max_val + min_val);\n    ] else [\n        saturation = delta / (2 - max_val - min_val);\n    ];\n];\n\n// Step 5: Calculate Hue (in degrees)\nvariable hue: Number = 0;\nif (delta > 0) [\n    if (max_val == r) [\n        variable hue_segment: Number = (g - b) / delta;\n        hue = 60 * hue_segment;\n    ] else [\n        if (max_val == g) [\n            hue = 60 * ((b - r) / delta + 2);\n        ] else [\n            hue = 60 * ((r - g) / delta + 4);\n        ];\n    ];\n];\n\n// Ensure hue is in [0, 360) range\nif (hue < 0) [\n    hue = hue + 360;\n];\n\n// Convert to final ranges: H (0-360), S (0-100), L (0-100)\nhsl.update(0, hue);\nhsl.update(1, saturation * 100);\nhsl.update(2, lightness * 100);\n\nvariable output: Color.HSL;\noutput.h = hsl.get(0);\noutput.s = hsl.get(1);\noutput.l = hsl.get(2);\nreturn output;"},"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/srgb-color/0/","target":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/hsl-color/0/","lossless":true,"description":"Converts RGB to HSL using standard algorithm"},{"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable hsl: List = {input}.h, {input}.s, {input}.l;\nvariable rgb: List = 0, 0, 0;\nvariable H: Number = hsl.get(0);\nvariable S: Number = hsl.get(1) / 100;  // Convert percentage to [0,1]\nvariable L: Number = hsl.get(2) / 100;  // Convert percentage to [0,1]\n\n// Step 1: Calculate chroma\nvariable C: Number = (1 - abs(2 * L - 1)) * S;\n\n// Step 2: Calculate hue sector (H' = H / 60)\nvariable H_prime: Number = H / 60;\n\n// Step 3: Calculate intermediate value X\n// X = C * (1 - |H' mod 2 - 1|)\n// Since we can't use mod, we'll implement it with conditional logic\nvariable H_mod: Number = H_prime;\nif (H_prime >= 2) [\n    H_mod = H_prime - 2;\n];\nif (H_prime >= 4) [\n    H_mod = H_prime - 4;\n];\nvariable X: Number = C * (1 - abs(H_mod - 1));\n\n// Step 4: Map (C, X, 0) to RGB' based on hue sector\nvariable R1: Number = 0;\nvariable G1: Number = 0;\nvariable B1: Number = 0;\n\nif (H_prime >= 0 && H_prime < 1) [      // 0° ≤ H < 60°\n    R1 = C;\n    G1 = X;\n    B1 = 0;\n] else [\n    if (H_prime >= 1 && H_prime < 2) [  // 60° ≤ H < 120°\n        R1 = X;\n        G1 = C;\n        B1 = 0;\n    ] else [\n        if (H_prime >= 2 && H_prime < 3) [  // 120° ≤ H < 180°\n            R1 = 0;\n            G1 = C;\n            B1 = X;\n        ] else [\n            if (H_prime >= 3 && H_prime < 4) [  // 180° ≤ H < 240°\n                R1 = 0;\n                G1 = X;\n                B1 = C;\n            ] else [\n                if (H_prime >= 4 && H_prime < 5) [  // 240° ≤ H < 300°\n                    R1 = X;\n                    G1 = 0;\n                    B1 = C;\n                ] else [                             // 300° ≤ H < 360°\n                    R1 = C;\n                    G1 = 0;\n                    B1 = X;\n                ];\n            ];\n        ];\n    ];\n];\n\n// Step 5: Calculate match value and final RGB\nvariable m: Number = L - C / 2;\nvariable R: Number = (R1 + m) * 255;\nvariable G: Number = (G1 + m) * 255;\nvariable B: Number = (B1 + m) * 255;\n\n// Ensure RGB values are in [0,255] range\nif (R < 0) [\n    R = 0;\n];\nif (R > 255) [\n    R = 255;\n];\nif (G < 0) [\n    G = 0;\n];\nif (G > 255) [\n    G = 255;\n];\nif (B < 0) [\n    B = 0;\n];\nif (B > 255) [\n    B = 255;\n];\n\nrgb.update(0, R);\nrgb.update(1, G);\nrgb.update(2, B);\n\nvariable output: Color.SRGB;\noutput.r = rgb.get(0);\noutput.g = rgb.get(1);\noutput.b = rgb.get(2);\nreturn output;"},"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/hsl-color/0/","target":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/srgb-color/0/","lossless":true,"description":"Converts HSL to RGB using standard algorithm"}],"description":"HSL (Hue, Saturation, Lightness) color space - cylindrical representation of RGB","initializers":[{"title":"function","schema":{"type":"string","pattern":"^hsl\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$"},"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable color_parts: List = {input};\nvariable output: Color.HSL;\noutput.h = color_parts.get(0);\noutput.s = color_parts.get(1);\noutput.l = color_parts.get(2);\nreturn output;"},"keyword":"hsl","description":"Creates a HSL color from string"}]}],
  ['https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/srgb-color/0/', {"name":"SRGB","type":"color","schema":{"type":"object","order":["r","g","b"],"required":["r","g","b"],"properties":{"b":{"type":"number"},"g":{"type":"number"},"r":{"type":"number"}},"additionalProperties":false},"conversions":[{"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":" variable color_parts: List = {input}.to_string().split('#'); \n variable color: List = color_parts.get(1).split(); \n variable length: Number = color.length(); \n variable rgb: List = 0, 0, 0; \n if(length == 3) [ \n rgb.update(0, parse_int(color.get(0).concat(color.get(0)), 16)); \n rgb.update(1, parse_int(color.get(1).concat(color.get(1)), 16)); \n rgb.update(2, parse_int(color.get(2).concat(color.get(2)), 16)); \n ] else [ \n rgb.update(0, parse_int(color.get(0).concat(color.get(1)), 16)); \n rgb.update(1, parse_int(color.get(2).concat(color.get(3)), 16)); \n rgb.update(2, parse_int(color.get(4).concat(color.get(5)), 16)); \n ]; \n \n variable output: Color.SRGB; \n output.r = rgb.get(0); \n output.g = rgb.get(1); \n output.b = rgb.get(2); \n \n return output; \n"},"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/hex-color/0/","target":"$self","lossless":true,"description":"Converts HEX to RGB"},{"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable rgba: List = {input}.r, {input}.g, {input}.b;\n    variable hex: String = \"#\";\n    variable i: Number = 0;\n    variable value: Number = 0;\n    // Convert RGBA to Hex\n    while( i < min(rgba.length(), 3)) [\n        value = round(rgba.get(i));\n        if(value < 16) [\n            hex = hex.concat(\"0\").concat(value.to_string(16));\n        ] else [\n            hex = hex.concat(value.to_string(16));\n        ];\n        i = i + 1;\n    ];\n    \n    if (rgba.length() == 4) [\n        value = rgba.get(3) * 255; // Convert alpha to 0-255 range\n        if(value < 16) [\n            hex = hex.concat(\"0\").concat(value.to_string(16));\n        ] else [\n            hex = hex.concat(value.to_string(16));\n        ];\n    ];\n    \n    return hex;"},"source":"$self","target":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/hex-color/0/","lossless":true,"description":"Converts RGB to HEX"}],"description":"RGB color","initializers":[{"title":"function","schema":{"type":"string","pattern":"^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$"},"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable color_parts: List = {input}; \n variable output: Color.SRGB;\n output.r = color_parts.get(0);\n output.g = color_parts.get(1);\n output.b = color_parts.get(2);\n return output;"},"keyword":"srgb","description":"Creates a RGB color from string"}]}],
  ['https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/rgba-color/0/', {"name":"RGBA","type":"color","schema":{"type":"object","order":["r","g","b","a"],"required":["r","g","b","a"],"properties":{"a":{"type":"number"},"b":{"type":"number"},"g":{"type":"number"},"r":{"type":"number"}},"additionalProperties":false},"conversions":[{"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":" variable color_parts: List = {input}.split('#'); \n variable color: List = color_parts.get(1).split(); \n variable length: Number = color.length(); \n variable rgba: List = 0, 0, 0, 1; \n if(length == 3) [ \n rgba.update(0, parse_int(color.get(0).concat(color.get(0)), 16)); \n rgba.update(1, parse_int(color.get(1).concat(color.get(1)), 16)); \n rgba.update(2, parse_int(color.get(2).concat(color.get(2)), 16)); \n ] else [ \n if(length == 6) [ \n rgba.update(0, parse_int(color.get(0).concat(color.get(1)), 16)); \n rgba.update(1, parse_int(color.get(2).concat(color.get(3)), 16)); \n rgba.update(2, parse_int(color.get(4).concat(color.get(5)), 16)); \n ] else [ \n if(length == 8) [ \n rgba.update(0, parse_int(color.get(0).concat(color.get(1)), 16)); \n rgba.update(1, parse_int(color.get(2).concat(color.get(3)), 16)); \n rgba.update(2, parse_int(color.get(4).concat(color.get(5)), 16)); \n rgba.update(3, parse_int(color.get(6).concat(color.get(7)), 16) / 255); \n ] \n ] \n ]; \n \n variable output: Color.RGBA; \n output.r = rgba.get(0); \n output.g = rgba.get(1); \n output.b = rgba.get(2); \n output.a = rgba.get(3); \n \n return output; \n"},"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/hex-color/0/","target":"$self","lossless":true,"description":"Converts HEX to RGBA"},{"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable rgba: List = {input}.r,{input}.g,{input}.b,{input}.a;\n    variable hex: String = \"#\";\n    variable i: Number = 0;\n    variable value: Number = 0;\n    // Convert RGBA to Hex\n    while( i < min(rgba.length(), 3)) [\n        value = rgba.get(i);\n        if(value < 16) [\n            hex = hex.concat(\"0\").concat(value.to_string(16));\n        ] else [\n            hex = hex.concat(value.to_string(16));\n        ];\n        i = i + 1;\n    ];\n    \n    if (rgba.length() == 4) [\n        value = rgba.get(3) * 255; // Convert alpha to 0-255 range\n        if(value < 16) [\n            hex = hex.concat(\"0\").concat(value.to_string(16));\n        ] else [\n            hex = hex.concat(value.to_string(16));\n        ];\n    ];\n    \n    return hex;"},"source":"$self","target":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/hex-color/0/","lossless":true,"description":"Converts RGBA to HEX"},{"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable input: Color.RGB = {input};\nvariable output: Color.RGBA;\noutput.r = input.r;\noutput.g = input.g;\noutput.b = input.b;\noutput.a = 1;\nreturn output;"},"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/rgb-color/0/","target":"$self","lossless":true,"description":"Converts RGB to RGBA"},{"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable output: Color.RGB;\noutput.r = {input}.r;\noutput.g = {input}.g;\noutput.b = {input}.b;\nreturn output;"},"source":"$self","target":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/rgb-color/0/","lossless":false,"description":"Converts RGBA to RGB (drops alpha)"}],"description":"RGBA color with alpha transparency","initializers":[{"title":"function","schema":{"type":"string","pattern":"^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*([0-1](?:\\.\\d+)?)\\)$"},"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable color_parts: List = {input}; \n variable output: Color.RGBA;\n output.r = color_parts.get(0);\n output.g = color_parts.get(1);\n output.b = color_parts.get(2);\n output.a = color_parts.get(3);\n return output;"},"keyword":"rgba","description":"Creates a RGBA color from string"}]}],
  ['https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/oklch-color/0/', {"name":"OKLCH","type":"color","schema":{"type":"object","order":["l","c","h"],"required":["l","c","h"],"properties":{"c":{"type":"number"},"h":{"type":"number"},"l":{"type":"number"}},"additionalProperties":false},"conversions":[{"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":" variable color_parts: List = {input}.to_string().split('#'); \n variable color: List = color_parts.get(1).split(); \n variable length: Number = color.length(); \n variable rgb: List = 0, 0, 0; \n \n // Parse hex to RGB \n if(length == 3) [ \n rgb.update(0, parse_int(color.get(0).concat(color.get(0)), 16) / 255); \n rgb.update(1, parse_int(color.get(1).concat(color.get(1)), 16) / 255); \n rgb.update(2, parse_int(color.get(2).concat(color.get(2)), 16) / 255); \n ] else [ \n rgb.update(0, parse_int(color.get(0).concat(color.get(1)), 16) / 255); \n rgb.update(1, parse_int(color.get(2).concat(color.get(3)), 16) / 255); \n rgb.update(2, parse_int(color.get(4).concat(color.get(5)), 16) / 255); \n ]; \n \n // RGB to linear RGB \n variable r: Number = rgb.get(0); \n variable g: Number = rgb.get(1); \n variable b: Number = rgb.get(2); \n \n if(r <= 0.04045) [ r = r / 12.92; ] else [ r = pow((r + 0.055) / 1.055, 2.4); ]; \n if(g <= 0.04045) [ g = g / 12.92; ] else [ g = pow((g + 0.055) / 1.055, 2.4); ]; \n if(b <= 0.04045) [ b = b / 12.92; ] else [ b = pow((b + 0.055) / 1.055, 2.4); ]; \n \n // Linear RGB to XYZ (sRGB D65) \n variable x: Number = r * 0.4124564 + g * 0.3575761 + b * 0.1804375; \n variable y: Number = r * 0.2126729 + g * 0.7151522 + b * 0.0721750; \n variable z: Number = r * 0.0193339 + g * 0.1191920 + b * 0.9503041; \n \n // XYZ to OKLab \n variable l_: Number = pow(0.8189330101 * x + 0.3618667424 * y - 0.1288597137 * z, 1/3); \n variable m_: Number = pow(0.0329845436 * x + 0.9293118715 * y + 0.0361456387 * z, 1/3); \n variable s_: Number = pow(0.0482003018 * x + 0.2643662691 * y + 0.6338517070 * z, 1/3); \n \n variable lab_l: Number = 0.2104542553 * l_ + 0.7936177850 * m_ - 0.0040720468 * s_; \n variable lab_a: Number = 1.9779984951 * l_ - 2.4285922050 * m_ + 0.4505937099 * s_; \n variable lab_b: Number = 0.0259040371 * l_ + 0.7827717662 * m_ - 0.8086757660 * s_; \n \n // OKLab to OKLCH \n variable lch_l: Number = lab_l; \n variable lch_c: Number = sqrt(lab_a * lab_a + lab_b * lab_b); \n variable lch_h: Number = atan2(lab_b, lab_a) * 180 / 3.14159265359; \n \n if(lch_h < 0) [ lch_h = lch_h + 360; ]; \n \n variable output: Color.OKLCH; \n output.l = lch_l; \n output.c = lch_c; \n output.h = lch_h; \n \n return output; \n"},"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/hex-color/0/","target":"$self","lossless":true,"description":"Converts HEX to OKLCH"},{"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":" // OKLCH to OKLab \n variable lch_l: Number = {input}.l; \n variable lch_c: Number = {input}.c; \n variable lch_h: Number = {input}.h; \n \n variable h_rad: Number = lch_h * 3.14159265359 / 180; \n variable lab_l: Number = lch_l; \n variable lab_a: Number = lch_c * cos(h_rad); \n variable lab_b: Number = lch_c * sin(h_rad); \n \n // OKLab to XYZ \n variable l_: Number = lab_l + 0.3963377774 * lab_a + 0.2158037573 * lab_b; \n variable m_: Number = lab_l - 0.1055613458 * lab_a - 0.0638541728 * lab_b; \n variable s_: Number = lab_l - 0.0894841775 * lab_a - 1.2914855480 * lab_b; \n \n variable l3: Number = l_ * l_ * l_; \n variable m3: Number = m_ * m_ * m_; \n variable s3: Number = s_ * s_ * s_; \n \n variable x: Number = 1.2268798733 * l3 - 0.5578149965 * m3 + 0.2813910456 * s3; \n variable y: Number = -0.0405801784 * l3 + 1.1122568696 * m3 - 0.0716766787 * s3; \n variable z: Number = -0.0763812845 * l3 - 0.4214819784 * m3 + 1.5861632204 * s3; \n \n // XYZ to linear RGB (sRGB D65) \n variable r: Number = x * 3.2404542 - y * 1.5371385 - z * 0.4985314; \n variable g: Number = -x * 0.9692660 + y * 1.8760108 + z * 0.0415560; \n variable b: Number = x * 0.0556434 - y * 0.2040259 + z * 1.0572252; \n \n // Linear RGB to RGB \n if(r <= 0.0031308) [ r = r * 12.92; ] else [ r = 1.055 * pow(r, 1/2.4) - 0.055; ]; \n if(g <= 0.0031308) [ g = g * 12.92; ] else [ g = 1.055 * pow(g, 1/2.4) - 0.055; ]; \n if(b <= 0.0031308) [ b = b * 12.92; ] else [ b = 1.055 * pow(b, 1/2.4) - 0.055; ]; \n \n // Clamp values \n if(r < 0) [ r = 0; ]; if(r > 1) [ r = 1; ]; \n if(g < 0) [ g = 0; ]; if(g > 1) [ g = 1; ]; \n if(b < 0) [ b = 0; ]; if(b > 1) [ b = 1; ]; \n \n // RGB to HEX \n variable rgb_values: List = r * 255, g * 255, b * 255; \n variable hex: String = \"#\"; \n variable i: Number = 0; \n variable value: Number = 0; \n \n while(i < 3) [ \n value = floor(rgb_values.get(i) + 0.5); \n if(value < 16) [ \n hex = hex.concat(\"0\").concat(value.to_string(16)); \n ] else [ \n hex = hex.concat(value.to_string(16)); \n ]; \n i = i + 1; \n ]; \n \n return hex; \n"},"source":"$self","target":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/hex-color/0/","lossless":true,"description":"Converts OKLCH to HEX"}],"description":"OKLCH color space - polar form of OKLab by Björn Ottosson with Lightness, Chroma, and Hue","initializers":[{"title":"function","schema":{"type":"string","pattern":"^oklch\\(([0-1](?:\\.\\d+)?),\\s*([0-1](?:\\.\\d+)?),\\s*(\\d{1,3}(?:\\.\\d+)?)\\)$"},"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable color_parts: List = {input}; \n variable output: Color.OKLCH;\n output.l = color_parts.get(0);\n output.c = color_parts.get(1);\n output.h = color_parts.get(2);\n return output;"},"keyword":"oklch","description":"Creates an OKLCH color from string"}]}],
  ['https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/css-color/0/', {"name":"CssColor","type":"color","description":"CSS color string representation","schema":{"type":"object","properties":{"value":{"type":"string"},"input":{"type":"color"}},"required":["value","input"],"order":["value","input"],"additionalProperties":false},"initializers":[],"conversions":[{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/hex-color/0/","target":"$self","description":"Converts Hex to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable output: Color.CssColor;\noutput.value = {input};\nreturn output;"}},{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/rgb-color/0.0.1/","target":"$self","description":"Converts RGB to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable outputs: List = \"rgb(\" {input}.r \", \" {input}.g \", \" {input}.b \")\";\nvariable output: Color.CssColor;\noutput.value = outputs.join();\noutput.input = {input}\n;\nreturn output;"}},{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/srgb-color/0.1.0/","target":"$self","description":"Converts SRGB to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable outputs: List = \"rgb(\" {input}.r \", \" {input}.g \", \" {input}.b \")\";\nvariable output: Color.CssColor;\noutput.value = outputs.join();\noutput.input = {input}\n;\nreturn output;"}},{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/rgba-color/0.0.1/","target":"$self","description":"Converts RGBA to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable outputs: List = \"rgba(\" {input}.r \", \" {input}.g \", \" {input}.b \", \" {input}.a \")\";\nvariable output: Color.CssColor;\noutput.value = outputs.join();\noutput.input = {input}\n;\nreturn output;"}},{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/hsl-color/0.0.1/","target":"$self","description":"Converts HSL to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable outputs: List = \"hsl(\" {input}.h \", \" {input}.s \"%, \" {input}.l \"%)\";\nvariable output: Color.CssColor;\noutput.value = outputs.join();\noutput.input = {input};\nreturn output;"}},{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/lrgb-color/0.0.1/","target":"$self","description":"Converts LRGB to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable r: Number = {input}.r * 255;\nvariable g: Number = {input}.g * 255;\nvariable b: Number = {input}.b * 255;\nvariable outputs: List = \"rgb(\" r \", \" g \", \" b \")\";\nvariable output: Color.CssColor;\noutput.value = outputs.join();\noutput.input = {input}\n;\nreturn output;"}},{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/rgb-color/0/","target":"$self","description":"Converts RGB to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable outputs: List = \"rgb(\" {input}.r \", \" {input}.g \", \" {input}.b \")\";\nvariable output: Color.CssColor;\noutput.value = outputs.join();\noutput.input = {input}\n;\nreturn output;"}},{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/srgb-color/0.1.0/","target":"$self","description":"Converts SRGB to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable outputs: List = \"rgb(\" {input}.r \", \" {input}.g \", \" {input}.b \")\";\nvariable output: Color.CssColor;\noutput.value = outputs.join();\noutput.input = {input}\n;\nreturn output;"}},{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/rgba-color/0.0.1/","target":"$self","description":"Converts RGBA to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable outputs: List = \"rgba(\" {input}.r \", \" {input}.g \", \" {input}.b \", \" {input}.a \")\";\nvariable output: Color.CssColor;\noutput.value = outputs.join();\noutput.input = {input}\n;\nreturn output;"}},{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/hsl-color/0/","target":"$self","description":"Converts HSL to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable outputs: List = \"hsl(\" {input}.h \", \" {input}.s \"%, \" {input}.l \"%)\";\nvariable output: Color.CssColor;\noutput.value = outputs.join();\noutput.input = {input};\nreturn output;"}},{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/lrgb-color/0/","target":"$self","description":"Converts LRGB to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable r: Number = {input}.r * 255;\nvariable g: Number = {input}.g * 255;\nvariable b: Number = {input}.b * 255;\nvariable outputs: List = \"rgb(\" r \", \" g \", \" b \")\";\nvariable output: Color.CssColor;\noutput.value = outputs.join();\noutput.input = {input}\n;\nreturn output;"}},{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/oklch-color/0.0.1/","target":"$self","description":"Converts OKLCH to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable outputs: List = \"oklch(\" {input}.l \" \" {input}.c \" \" {input}.h \")\";\nvariable output: Color.CssColor;\noutput.value = outputs.join();\noutput.input = {input};\nreturn output;"}},{"source":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/oklch-color/0/","target":"$self","description":"Converts OKLCH to CssColor","lossless":true,"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable outputs: List = \"oklch(\" {input}.l \" \" {input}.c \" \" {input}.h \")\";\nvariable output: Color.CssColor;\noutput.value = outputs.join();\noutput.input = {input};\nreturn output;"}}]}]
]);

export const FUNCTION_SCHEMAS = new Map<string, any>([
  ['https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/function/relative-darken/0/', {"name":"Relative Darken","type":"function","input":{"type":"object","properties":{"color":{"type":"color","description":"The base color to darken."},"percentage":{"type":"number","description":"The percentage amount to darken the color (0-100)."}}},"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable input: List = {input};\nvariable baseColor: Color = input.get(0);\nvariable percentage: Number = input.get(1);\n\n// Convert to HSL for lightness manipulation\nvariable hslColor: Color.Hsl = baseColor.to.hsl();\n\n// Calculate new lightness (reduce by percentage)\nvariable currentLightness: Number = hslColor.l;\nvariable darkenAmount: Number = currentLightness * (percentage / 100);\nvariable newLightness: Number = currentLightness - darkenAmount;\n\n// Ensure lightness doesn't go below 0\nif (newLightness < 0) [\n    newLightness = 0;\n]\n\n// Create and return the darkened color\nvariable darkenedColor: Color.Hsl = hsl(hslColor.h, hslColor.s, newLightness);\nreturn darkenedColor;"},"keyword":"darken","description":"Darkens a color by a relative percentage amount by reducing its lightness value.","requirements":["https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/hsl-color/0.0.1/","https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/srgb-color/0.0.1/"]}],
  ['https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/function/relative-lighten/0/', {"name":"Relative Lighten","type":"function","input":{"type":"object","properties":{"color":{"type":"color","description":"The base color to lighten."},"percentage":{"type":"number","description":"The percentage amount to lighten the color (0-100)."}}},"script":{"type":"https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/core/tokenscript/0/","script":"variable input: List = {input};\nvariable baseColor: Color = input.get(0);\nvariable percentage: Number = input.get(1);\n\n// Convert to HSL for lightness manipulation\nvariable hslColor: Color.Hsl = baseColor.to.hsl();\n\n// Calculate new lightness (increase by percentage)\nvariable currentLightness: Number = hslColor.l;\nvariable lightenAmount: Number = (100 - currentLightness) * (percentage / 100);\nvariable newLightness: Number = currentLightness + lightenAmount;\n\n// Ensure lightness doesn't go above 100\nif (newLightness > 100) [\n    newLightness = 100;\n]\n\n// Create and return the lightened color\nvariable output: Color.Hsl;\noutput.h = hslColor.h;\noutput.s = hslColor.s;\noutput.l = newLightness;\nreturn output;"},"keyword":"lighten","description":"Lightens a color by a relative percentage amount by increasing its lightness value.","requirements":["https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/hsl-color/0.0.1/","https://schema.tokenscript.dev.gcp.tokens.studio/api/v1/schema/srgb-color/0.0.1/"]}]
]);

export function getColorSchema(url: string): any | undefined {
  return COLOR_SCHEMAS.get(url);
}

export function getFunctionSchema(url: string): any | undefined {
  return FUNCTION_SCHEMAS.get(url);
}
